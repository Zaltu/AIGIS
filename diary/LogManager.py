"""
Module for the Log Management class
"""
import logging
from diary.AigisLog import AigisLogger  #pylint: disable=no-name-in-module
from diary.LogUtils import _add_log_handlers, CORE_LOG_LOCATION, LOG  #pylint: disable=no-name-in-module

class LogManager():
    """
    Maintainer class for all the logging instances generated by Aigis and her plugins.
    """
    loggers = {}
    def __init__(self):
        pass

    def getLogger(self, plugin):
        """
        Return a specific plugin's logger

        :param AigisPlugin plugin: the plugin

        :returns: the plugin's logger if it exists, or None
        :rtype: AigisLog
        """
        if plugin.id in self.loggers:
            return self.loggers[plugin.id]
        return None

    def getCoreLogger(self, corename):
        """
        Fetch a logger to be used for a core module.

        :param str corename: name of the core module. Generally module.__name__

        :returns: configured python logger
        :rtype: logging.logger
        """
        if corename in self.loggers:
            return self.loggers[corename]
        self.loggers[corename] = logging.getLogger(corename)
        _add_log_handlers(self.loggers[corename], CORE_LOG_LOCATION.format(corename=corename))
        return self.loggers[corename]

    def hook(self, plugin):
        """
        Generate an AigisLogger object to be used to hook into a plugin's output.
        Careful. This may open a file handler.

        :param AigisPlugin plugin: the plugin to generate a logger for

        :returns: the AigisLogger
        :rtype: AigisLogger
        """
        logger = AigisLogger(plugin)
        self.loggers[plugin.id] = logger
        return logger

    def cleanup(self):
        """
        Clean up all loggers registered in the LogManager
        """
        LOG.shutdown("Cleaning up registered loggers...")
        for logger in self.loggers:
            logger.cleanup()
