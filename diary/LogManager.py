"""
Module for the Log Management class
"""
import os
import shutil
from datetime import datetime
from diary.AigisLog import AigisLogger
from diary.LogUtils import LOG_LOCATION, LOG
from utils import path_utils  #pylint: disable=no-name-in-module

class LogManager():
    """
    Maintainer class for all the logging instances generated by Aigis and her plugins.
    """
    loggers = {}
    def __init__(self):
        pass

    def getLogger(self, plugin):
        """
        Return a specific plugin's logger

        :param AigisPlugin plugin: the plugin

        :returns: the plugin's logger if it exists, or None
        :rtype: AigisLog
        """
        if plugin.id in self.loggers:
            return self.loggers[plugin.id]
        return None

    def hook(self, plugin):
        """
        Generate an AigisLogger object to be used to hook into a plugin's output.
        Careful. This may open a file handler.

        :param AigisPlugin plugin: the plugin to generate a logger for

        :returns: the AigisLogger
        :rtype: AigisLogger
        """
        logger = AigisLogger(plugin)
        self.loggers[plugin.id] = logger
        return logger

    def cleanup(self):
        """
        Clean up all loggers registered in the LogManager
        """
        LOG.shutdown("Cleaning up registered loggers...")
        for logger in self.loggers:
            self.loggers[logger].cleanup()

        LOG.shutdown("Backing up logs to timestamped dir...")
        log_dump_dir = os.path.abspath(
            os.path.join(
                os.path.dirname(__file__),
                "../",
                datetime.now().strftime("%Y-%m-%d_%X")
            )
        )
        path_utils.ensure_path_exists(log_dump_dir)
        shutil.move(LOG_LOCATION, log_dump_dir)
